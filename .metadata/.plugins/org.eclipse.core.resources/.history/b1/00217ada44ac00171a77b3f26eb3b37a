package practica;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import javax.swing.text.html.HTMLDocument.Iterator;
public class EspacioEstados {

	private Estado e;
	private int max;
	private int filas;
	private int columnas;
	private ArrayList<Accion> acciones;
	

	public EspacioEstados(Estado e, int max, int filas, int columnas) {
		this.filas = filas; // numero de filas en el terreno
		this.columnas = columnas; // numero de columnas en el terreno
		this.max = max;
		this.e = e;

		sucesores(e);
	}

	public ArrayList<Accion> getAcciones() {
		return acciones;
	}

	public void setAcciones(ArrayList<Accion> acciones) {
		this.acciones = acciones;
	}

	public int getMax() {
		return max;
	}

	public void setMax(int max) {
		this.max = max;
	}

	public int getFilas() {
		return filas;
	}

	public void setFilas(int filas) {
		this.filas = filas;
	}

	public int getColumnas() {
		return columnas;
	}

	public void setColumnas(int columnas) {
		this.columnas = columnas;
	}

	public ArrayList<Sucesor> sucesores(Estado estado) {
		int costo = 1;
		Estado e;
		Sucesor sucesor;
		int cantidadaRepartir;
		int i;
		ArrayList<Sucesor> sucesores = new ArrayList<Sucesor>();
		ArrayList<Integer[]> movimientosValidos = new ArrayList<>();
		ArrayList<Distribucion> distribuciones = new ArrayList<>();
		sucesores = null;

		cantidadaRepartir = getMax() - estado.getCantidadArena();
		// int size = getAcciones().size();
		// tengo que hacer un bucle desde 0 hasta el numero de acciones que haya para
		// crear
		// tantos sucesores como acciones haya
		movimientosValidos = estado.movimientosValidos(getFilas(), getColumnas());
		for(int j = 0; j< movimientosValidos.size(); j++) {
			Integer[] prueba = movimientosValidos.get(j);
            System.out.print(prueba[0] + "," + prueba[1]);
            System.out.println(" " );
            
		}
		distribuciones = reparto(cantidadaRepartir, movimientosValidos);
		System.out.println("Tamaño:" + distribuciones.size());
		for (i = 0; i < distribuciones.size(); i++) {
			System.out.println(distribuciones.get(i));
		}

		// for(int i = 0; i < 1; i++){
		// Si el movimiento que hay en la accion coincide con el que hay en movimientos
		// validos
		// entonces creamos un nuevo estado y con ello un nuevo sucesor.
		// e = new Estado();//Este estado es el de despues de realizar la acción
		// sucesor = new Sucesor(getAcciones().get(i),e,costo);
		// sucesores.add(sucesor);
		// }

		return sucesores;
	}

	public ArrayList<Distribucion> reparto(int r, ArrayList<Integer[]> movimientos) {
		Distribucion distr;
		int i, newR;
		ArrayList<Distribucion> distribuciones = new ArrayList<>();
		ArrayList<Integer[]> aux = new ArrayList<>();
		
		if (movimientos.size() == 1) {
			
			distr = new Distribucion(r, movimientos.get(0));
			distribuciones.add(distr);
			//System.out.println(distr);
			for (int j=0; j<distribuciones.size();j++) {
				System.out.println("imprimed");
				System.out.println(distribuciones.get(j));
				
			}
			
			
			///////////////////////////////////////
			System.out.println("  ");
			System.out.println("Termino distribucion");
			System.out.println("  ");
			
			return distribuciones;
		} else {
			
			for (i = 0; i < r + 1; i++) {
				
				aux.removeAll(aux);
				aux.addAll(movimientos);
				distr = new Distribucion(i, aux.get(0));
				
				//System.out.println(distr);
				
				distribuciones.add(distr);
				aux.remove(0);
				newR = r - i;
				distribuciones.addAll(reparto(newR, aux));
				aux.removeAll(aux);

			}
			return distribuciones;
		}

	}
}
